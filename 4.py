# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126FlxsVImJ2_gemk_iNFoWFiesd-JwlT
"""

# -*- coding: utf-8 -*-
"""Streamlit XGBoost Model for Steam Turbine with Validation and SHAP"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from math import sqrt
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
import shap
import warnings
warnings.filterwarnings('ignore')

# Custom CSS to adjust layout
st.markdown("""
    <style>
        .reportview-container {
            max-width: 100%;
        }
        .sidebar .sidebar-content {
            background-color: #f0f2f6;
        }
    </style>
""", unsafe_allow_html=True)

def check_password():
    """Password authentication"""
    if "password_correct" not in st.session_state:
        st.session_state["password_correct"] = False

    def password_entered():
        if st.session_state["password"] == st.secrets["password"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if not st.session_state["password_correct"]:
        st.text_input("Password", type="password", on_change=password_entered, key="password")
        return False
    return True

def main():
    """Main application logic"""
    st.title("Steam Turbine Performance Predictor")

    # Dark mode toggle
    dark_mode = st.sidebar.checkbox("Dark Mode")
    if dark_mode:
        st.markdown("""
        <style>
            .reportview-container {background: #0e1117; color: white;}
            .stMetric {color: black !important;}
        </style>
        """, unsafe_allow_html=True)

    # File upload section
    st.header("üìÅ Data Upload")
    uploaded_file = st.file_uploader("Upload dataset (CSV)", type="csv")
    validation_file = st.file_uploader("Upload validation data (CSV)", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file, header=1)
        features = ['CFR', 'TAF', 'MSP', 'MST', 'MSF', 'FWT', 'RHT', 'CV', 'Power']

        # Data exploration
        st.header("üîç Data Exploration")
        st.subheader("Feature Distribution")
        df_normalized = (df[features] - df[features].min()) / (df[features].max() - df[features].min())
        fig, ax = plt.subplots(figsize=(5, 3.65))
        for feature in features:
            sns.kdeplot(df_normalized[feature], ax=ax, label=feature)
        plt.legend(bbox_to_anchor=(0.5, 1.55), ncol=4, loc='upper center')
        st.pyplot(fig)

        # Correlation matrix
        st.subheader("Correlation Heatmap")
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(df.corr(), annot=True, cmap="viridis", ax=ax)
        st.pyplot(fig)

        # Model selection
        st.header("üéØ Model Configuration")
        model_type = st.radio("Prediction Target:", ("Thermal Efficiency (TE)", "Heat Rate (THR)"))

        # Model Configuration
        best_params_TE = {
            'eta': 0.1, 'gamma': 0.3, 'reg_lambda': 0.8, 'max_depth': 6,
            'subsample': 0.9, 'colsample_bytree': 0.7, 'n_estimators': 500
        }

        best_params_THR = {
            'eta': 0.05, 'gamma': 0.2, 'reg_lambda': 1.0, 'max_depth': 5,
            'subsample': 0.8, 'colsample_bytree': 0.6, 'n_estimators': 700
        }

        # Model training
        if model_type == "Thermal Efficiency (TE)":
            st.header("üî• Thermal Efficiency Prediction")
            x = df.drop(columns=['TE', 'THR'])
            y = df.TE
            x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

            @st.cache_data
            def train_te_model(_x_train, _y_train):
                model = XGBRegressor(**best_params_TE, verbosity=0, seed=50)
                model.fit(_x_train, _y_train)
                return model

            model = train_te_model(x_train, y_train)
            target_name = "TE"
            unit = "%"
        else:
            st.header("üå°Ô∏è Heat Rate Prediction")
            x = df.drop(columns=['TE', 'THR'])
            y = df.THR
            x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

            @st.cache_data
            def train_thr_model(_x_train, _y_train):
                model = XGBRegressor(**best_params_THR, verbosity=0, seed=50)
                model.fit(_x_train, _y_train)
                return model

            model = train_thr_model(x_train, y_train)
            target_name = "THR"
            unit = "kJ/kWh"

        # Predictions
        y_pred_train = model.predict(x_train)
        y_pred_test = model.predict(x_test)

        # Validation processing
        validation_r2 = None
        validation_rmse = None
        if validation_file:
            df_val = pd.read_csv(validation_file, header=1)
            x_val = df_val.drop(columns=['TE', 'THR'])
            if model_type == "Thermal Efficiency (TE)":
                y_val = df_val['TE']
            else:
                y_val = df_val['THR']
            y_val_pred = model.predict(x_val)
            validation_r2 = r2_score(y_val, y_val_pred)
            validation_rmse = sqrt(mean_squared_error(y_val, y_val_pred))

        # Metrics display
        st.header("üìà Model Performance")

        # Create columns based on validation presence
        if validation_file:
            col1, col2, col3 = st.columns(3)
        else:
            col1, col2 = st.columns(2)

        with col1:
            st.metric("Training R¬≤", f"{r2_score(y_train, y_pred_train):.3f}")
            st.metric("Training RMSE", f"{sqrt(mean_squared_error(y_train, y_pred_train)):.2f}")

        with col2:
            st.metric("Test R¬≤", f"{r2_score(y_test, y_pred_test):.3f}")
            st.metric("Test RMSE", f"{sqrt(mean_squared_error(y_test, y_pred_test)):.2f}")

        if validation_file:
            with col3:
                st.metric("Validation R¬≤", f"{validation_r2:.3f}")
                st.metric("Validation RMSE", f"{validation_rmse:.2f}")

        # SHAP analysis
        st.header("üìä Feature Contributions")
        with st.spinner('Generating SHAP analysis...'):
            explainer = shap.Explainer(model)
            shap_values = explainer(x)
            fig, ax = plt.subplots()
            shap.summary_plot(shap_values, x, show=False)
            plt.tight_layout()
            st.pyplot(fig)

        # Prediction interface
        st.header("üéõÔ∏è Make Predictions")
        input_data = {}
        cols = st.columns(3)
        for i, feature in enumerate(features):
            with cols[i%3]:
                input_data[feature] = st.number_input(feature, value=float(df[feature].mean()))

        if st.button("Predict"):
            prediction = model.predict(pd.DataFrame([input_data]))
            st.success(f"Predicted {target_name}: {prediction[0]:.2f} {unit}")

if __name__ == "__main__":
    if check_password():
        main()